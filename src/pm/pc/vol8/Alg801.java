package pm.pc.vol8;


/**
 * Created by 高文文 on 2017/2/27.
 * Problem ID: 110801	Little Bishops
 */
public class Alg801 {


    public static void main(String[] args) {
        Alg801 alg = new Alg801();
    }

}
/**
// n * n 的棋盘可以最多放置多少个象而不互相冲突？我是这样考虑的，因为象的吃子方式为
// 对角线吃子，则在棋盘上放置一个象后，它要么占据一条对角线，要么占据两条。当然先放置
// 占据一条对角线的象，可以将放置象的数量最大化，在棋盘的主、副主对角线上各放置一个
// 象，则象的总数目为 2，这样，主、副对角线将棋盘区域划分为四个等同的区域，无论在哪
// 个区域放置象，都因为棋盘的对称性会产生相同的效果，故只考虑一个区域的放置方法，然后
// 通过对称来求得总的放置数目。假设一个 8 * 8 的棋盘，已经在主、副对角线各放置了一个
// 象，已占据的位置用 * 号表示，未占据的位置用大写字母 O 表示。
//
//   1 2 3 4 5 6 7 8
// 1 B O-O-O-O-O-O B
// 2 O * O-O-O-O * O
// 3 O#O * O-O * O&O
// 4 O#O#O * * O&O&O
// 5 O#O#O * * O&O&O
// 6 O#O * O+O * O&O
// 7 O * O+O+O+O * O
// 8 * O+O+O+O+O+O *
//
// 如上图所示，有 - 符号连接的未占据位置和 + 符号连接的未占据位置，坐标 (1, 1) 和
// 坐标 (8, 1) 已经放置了象。先考虑 - 符号连接的区域，在此区域内，任意选一个位置放置
// 象将占据两条对角线（非主、副对角线），而且在此区域任意放置象，必将导致左右两个可以
// 放置象的区域被占据而不能再放置象（即有 # 符号和 & 符号的区域），则在有 - 符号的区
// 域所能放置的象的数目是由对角线的交叉点数目所确定的，即最多能再放置 6 个象而不互相
// 冲突，则总共能放置的象数目为 8 个，棋盘状态变为以下状态：
//
//   1 2 3 4 5 6 7 8
// 1 B B B B B B B B
// 2 * * * * * * * *
// 3 * * * * * * * *
// 4 * * * * * * * *
// 5 * * * * * * * *
// 6 * * * O+O * * *
// 7 * * O+O+O+O * *
// 8 * O+O+O+O+O+O *
//
// 则对于有 + 符号的区域来说，同样可以放置 6 个象而不互相冲突。则 8 * 8 的棋盘最大
// 可放置象的数目为 14 个。
//
//   1 2 3 4 5 6 7 8
// 1 B B B B B B B B
// 2 * * * * * * * *
// 3 * * * * * * * *
// 4 * * * * * * * *
// 5 * * * * * * * *
// 6 * * * * * * * *
// 7 * * * * * * * *
// 8 * B B B B B B *
//
// 则总结以下，n * n 的棋盘最大能放置象的数目为 n + (n - 2) 个，即 2 * (n - 1)
// 个象，n >= 2。对于 1 * 1 的棋盘来说，是特殊情况，只能放置 1 个象。那么是否可以通
// 过组合的方法解决本题呢？答案是肯定的。国际象棋的棋盘一般都分为白色和黑色区域，在白色
// 区域的象是无法攻击黑色区域内的象的，将黑白格子相间的棋盘顺时针旋转 45 度，则原来呈
// 斜线的主、副对角线成为垂直和水平的了，此时象的走法和车的走法是一样的了，问题转换为在
// 这样的 n * n 棋盘上放置 k 个车有多少种方法。假设这样的棋盘第 i 行的格子数为 r[i]，
// 用 t[i][j] 表示在前 i 行放置 j 个车而互不冲突的方法，可以得到以下的递推关系：
//
// t[i][j] = t[i - 1][j] + t[i - 1][j - 1] * (r[i] - (j - 1))
//
// 边界条件是：
//
// t[i][0] = 1, 0 <= i <= n
// t[0][j] = 0, 1 <= j <= k
//
// 递推关系的意义可以这样理解：因为每一行只能放置一个车，则 j 个车要么全在前 i - 1 行，
// 要么第 i 行有一个车，j 个车全在前 i - 1 行的放置方法为 t[i - 1][j]，第 i 行放置
// 一个车，前 i - 1 行放置 j - 1 个车，那么前 i - 1 行在放置 j - 1 个车时已经占用
// 了第 i 行的 j - 1 个格子，剩余的格子数为 r[i] - (j - 1)，则根据乘法原理，第二种
// 放置方法是两者的乘积，又根据加法原理，总的放置方法为第一种和第二种方法数量的和。边界
// 情形也容易理解，前 i 行放置 0 个车的方法有 1 种，前 0 行放置 j 个车的方法有 0 种。
// 由于将棋盘分成了两个区域，故在最后计算总的放置数时，应该是两个区域的累积。
//
// 那么如何通过借鉴八皇后问题通过回溯来解决本问题呢？通过观察分析，可以知道，构造候选集
// 的方法是其中关键不同的地方，八皇后问题在构建候选集时，因为皇后不能放置在同一行和同一
// 列，所以可以减少搜索的空间，而放置象时，象可以在同一行或者同一列，搜索的数量因此会增大
// 不过当棋盘较少时，还是可以完成的，当棋盘进一步增大时，回溯方法就显得吃力了，需要借助
// 组合数学的方法来计算放置方案数。在表示棋盘上的象的位置时，由于可以处于同一行或同一列
// 故需要不同的表示方法，一个方法是将棋盘的每个格子编号，从 1 - n^2。
//
// /* 八皇后问题构建候选集的过程。
// construct_candidates(int a[], int k, int n, int c[], int *ncandidates)
// {
//      int i,j;
//      bool legal_move;
//
//      *ncandidates = 0;
//      for (i=1; i<=n; i++)
//      {
//              legal_move = TRUE;
//              /* 对于放置象来说，需要考虑除已有象的对角线外的每一个位置，因为不存
//              /* 在像放置皇后时一行或一列只能放置一个这样的限制条件。
//              for (j=1; j<k; j++)
//              {
//                      if (abs((k)-j) == abs(i-a[j]))
//                      legal_move = FALSE;
//
//                      /* 对于放置象来说，并不需要检测来自行或者列的威胁，只需检
//                      /* 测对角线上的威胁。
//                      if (i == a[j])
//                      legal_move = FALSE;
//              }
//
//              if (legal_move == TRUE)
//              {
//                      c[*ncandidates] = i;
//                      *ncandidates = *ncandidates + 1;
//              }
//      }
// }
//
// 对于构建候选集的过程，尽管不需要考虑来自行或者列的威胁，但需要考虑除对角线外的每一个
// 位置，且并不存在一行只能放一个象的限制条件，这是搜索时间增加的原因。如果在放置象时，
// 不考虑位置的编号，会产生重复的放置方案，这个可以通过每次选择象时都选择比当前已选择的
// 象的位置序号大的位置来避免。尽管采用了相应的剪枝措施，对于较大的 n 和 k 来说，仍容易
// 得到 TLE。相对而言通过组合方法解题还是有优势的，除非用回溯法先生成给定范围内的所
// 有解，然后填表根据具体的 n 和 k 输出，否则当 n 和 k 进一步增大，计算时间将很长。
//
// UVa 10237 Bishops 和本题是类似的，但是 n 和 k 已经足够大，通过回溯已经不可能在
// 规定时间内找到答案，使用组合方法和大数运算成为必须。
*/
/*

　对于棋盘放车问题可以用组合数学的知识来解决，但是对于含禁区的摆放问题，虽然组合数学给出了经典的棋盘多项式+容斥原理的解法，但是实际中棋盘多项式的求解是很困难的，因此一般需要借助状态压缩动态规划求解。
　　现在题目中要求出互不攻击的象的方法数，象的攻击路线是斜的，是不是可以考虑采用放车的方法来解呢？将棋盘黑白染色，如果一个象在黑色的格子里面，那么它一定不会攻击到白色的格子，这样的话可以分开计数，然后最后利用乘法原理加起来就行了。把棋盘旋转45度，这样象的攻击路线就是直的了，如果只考虑一种颜色的话，那么问题就转变成了经典的放车问题了，可以利用动态规划解决。
　　设dp[i][j]表示前i行放了j个车的方法数，c[i]表示第i行可以放置的棋子数量，那么转移方程为：
　　　　dp[i][j] = dp[i-1][j] + dp[i-1][j-1] * (c[i] - (j - 1))
　　需要注意的是c数组应该是增序的，这样才能保证前面的j-1行放了车，对应这一行就有j-1个位

 */