package gww.geeks.dp;

public class IntegerKnapsack {
    /*
      1. 0-1背包
         有N件物品和一个容量为V的背包。放入第i件物品耗费的空间是Ci,得到的价值为Vi。求解将哪些物品装入背包中，可使得价值总和最大？
      【解】
         F(i, j)表示将前i件物品放入容量为j的包中可得到的最大价值，则F(N, V)为所求
         对于第i件物品有两种情况：将其放入背包中、不将其放入背包中。状态转移方程为：
         F(i, j) = max{F(i-1, j), F(i-1, j-Ci) + Vi}
      【伪代码】
         F(i, 0) = 0
         F(0, j) = 0
         for i=1 to N
           for j=Ci to V
             F(i, j) = max{F(i-1, j), F(i-1, j-ci) + vi}
        时间复杂度O(N*V)已无法优化，空间复杂度可以优化为O(V)

       【恰好装满背包 与 只希望价值尽量大的区别】
        恰好装满背包：初始化时F[0] = 0 其他的均为无穷大， 可以保证F[V]就是恰好装满时的价值
        价值尽量大时：初始化时F[0..V] = 0 得到的是价值尽可能大


      2. 完全背包



     */
}
