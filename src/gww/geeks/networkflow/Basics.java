package gww.geeks.networkflow;

/**
 * 【网络流定义】
 *     在有向图G=(V,E)中：
 *       1. 有唯一一个源点S（入度为0：出发点）
 *       2. 有唯一一个汇点T（出度为0：结束点）
 *       3. 图中每条弧(u, v)都有一个非负容量c(u,v)
 *     满足上述条件的图G称为网络流图，记为G(V, E, C)
 *
 *  源点：只出不进的点；
 *  汇点：只进不出的点；
 *  容量(Capacity)和流量(flow): 每条边上有两个量，从i到j的容量用c[i,j]表示，流量是f[i,j] 且满足 f[i,j] < c[i,j]；
 *
 *  对于非源点、非汇点来说，所有进入他的流量和等于所有从他本身出去的流量；
 *
 * 【可行流】
 *      每条弧(u,v)上给定一个实数f(u,v)满足：0 <= f(u,v) <= c(u,v)，则称为弧(u,v)上的流量
 *      若有一组流量满足条件：
 *        1. 源点S： 流出量 = 整个网络的流量；
 *        2. 汇点T:  流入量 = 整个网络的流量；
 *        3. 中间点: 总流入量 = 总流出量；
 *       那么，整个网络中的流量成为一个可行流（feasible flow）
 *   例子：
 *           f/c = flow/capacity  下例是一个可行流为5的网络流
 *
 *            A --4/4--> B --3/3-->D
 *             \        |         |
 *              1/6    1/2       3/5
 *               \     |          |
 *               \/   \/         \/
 *                  C  ----2/4--> E
 *
 *【最大流问题】
 *  在所有可行流中，流量最大的一个流的流量称为最大流，最大流可能不止一个。
 *
 *  例如：下图是一个最大流，最大流为 7
 *            A --4/4--> B --3/3-->D
 *             \        |         |
 *              3/6    1/2       3/5
 *               \     |          |
 *               \/   \/         \/
 *                  C  ----4/4--> E
 *
 *【Ford-Fulkerson 福特-福克森  又称Edmonds–Karp算法】
 *  1. 如果存在增广路径，就找出一条增广路径（BFS、DFS）
 *  2. 然后沿着该条增广路径更新流量（增加流量）
 *  可证明：可行流为最大流当且仅当不存在增广路径！
 *
 *   从S到T的一条简单路径中:
 *      1. 若边(u,v)的方向与该路径的方向一致，称(u,v)为正向边；
 *      2. 若边(u,v)的方向与该路径的方向不一致，称(u,v)为逆向边；
 *   例如：
 *            A ------> B ------> D
 *             \        |         |
 *              \       |         |
 *               \     |          |
 *               \/   \/         \/
 *                  C  ---------> E
 *
 *      简单路径 A --> C --> B --> D --> E
 *      正向边：(A, C) (B, D) (D, E)
 *      逆向边：(C, B)
 *
 *  【增广路径】
 *      若路径上所有的边满足：
 *       1. 所有正向边：f(u,v) < c(u,v)
 *       2. 所有逆向边：f(u,v) > 0
 *      则称该路径为一条增广路径(可增加流量的路径，即路径流量不满，未达到容量上限)
 *
 *  【沿增广路径更新流量】
 *      第一步 计算可增加的流量d
 *          对于增广路径(a1,a2,a3,..,an)上的边(ai,aj)：
 *            1. 若(ai,aj)为正向边，则增加流量 d = min{ c(ai,aj) - f(ai,aj) | j=i+1, i=1,2,3,..n-1 }
 *            2. 若(ai,aj)为逆向边，则增加流量 d = min{ f(ai,aj) | j=i+1, i=1,2,3,...,n-1 }
 *      第二步 更新流量
 *          对于增广路径(a1,a2,a3,..,an)上的边(ai,aj)：
 *            1. 若(ai,aj)为正向边，则 f(ai,aj) = f(ai,aj) + d
 *            2. 若(ai,aj)为逆向边，则 f(ai,aj) = f(ai,aj) - d
 *  例子：
 *            A ---4--> B --3---> D
 *             \        |         |
 *             6\      2|        5|
 *               \     |          |
 *               \/   \/         \/
 *                  C  ----4----> E
 * 开始流量为 sum = 0
 *
 * 增广路径1：A --> B --> C --> E
 *          d = min{4, 2, 4} = 2
 *          增加流量 sum =sum  + d = 2
 *  更新流量
 *            A --2/4--> B --3---> D
 *             \        |         |
 *             6\    2/2|        5|
 *               \     |          |
 *               \/   \/         \/
 *                  C  ---2/4---> E
 *
 * 增广路径2：A --> B --> D --> E
 *           d = min{4-2, 3, 5} = 2
 *           增加流量 sum = sum + d = 2 + 2 = 4
 *  更新流量
 *            A --4/4--> B --2/3--> D
 *             \        |         |
 *             6\    2/2|      2/5|
 *               \     |          |
 *               \/   \/         \/
 *                  C  ---2/4---> E
 *
 * 增广路径3：A --> C --> B --> D --> E
 *           d = min{6, 2, 3-2, 5-2,} = 1
 *           增加流量 sum = sum + d = 4 + 1 = 5
 *  更新流量
 *            A --4/4--> B --3/3--> D
 *             \        |         |
 *           1/6\    1/2|      3/5|
 *               \     |          |
 *               \/   \/         \/
 *                  C  ---2/4---> E
 *
 *  增广路径4：A --> C --> E
 *            d = min{6-1, 4-2} = 2
 *            增加流量 sum = sum + d = 5 + 2 = 7
 *  更新流量
 *            A --4/4--> B --3/3--> D
 *             \        |         |
 *           3/6\    1/2|      3/5|
 *               \     |          |
 *               \/   \/         \/
 *                  C  ---4/4---> E
 *
 * 为什么需要反向边？http://www.cnblogs.com/ZJUT-jiangnan/p/3632525.html
 *
 */
public class Basics {

}
